import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useAuth } from "@/hooks/use-auth";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { useLocation } from "wouter";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import {
  Award,
  Plus,
  Edit,
  Trash,
  ExternalLink,
  Eye,
  Copy,
  UserPlus,
  Check,
  Loader2,
  ArrowLeft,
  Pin,
  Users,
  Calendar,
  Tag,
  ChevronLeft,
  ChevronRight,
  AlertTriangle,
  Image as ImageIcon,
  Link as LinkIcon,
  X,
} from "lucide-react";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

// Types
interface SpotlightContributor {
  id: number;
  name: string;
  email?: string;
  role?: string;
  userId?: number;
  isRegisteredUser: boolean;
  user?: {
    id: number;
    username: string;
    name: string;
    email: string;
    avatar?: string;
  };
}

interface SpotlightTag {
  id: number;
  label: string;
  icon?: string;
  type: string;
}

interface SpotlightProject {
  id: number;
  userId: number;
  title: string;
  url: string;
  description?: string;
  thumbnail?: string;
  isPinned: boolean;
  createdAt: string;
  updatedAt: string;
  viewCount: number;
  clickCount: number;
  contributors?: SpotlightContributor[];
  tags?: SpotlightTag[];
}

// Form Schemas
const createProjectSchema = z.object({
  title: z.string().min(3, "Title must be at least 3 characters"),
  url: z.string().url("Please enter a valid URL"),
  description: z.string().optional(),
  thumbnail: z.string().optional(),
  isPinned: z.boolean().default(false),
  contributors: z.array(
    z.object({
      name: z.string().min(1, "Name is required"),
      email: z.string().email("Please enter a valid email").optional(),
      role: z.string().optional(),
    })
  ).optional(),
  tags: z.array(
    z.object({
      label: z.string().min(1, "Label is required"),
      icon: z.string().optional(),
      type: z.string().optional(),
    })
  ).max(3).optional(),
});

export default function SpotlightPage() {
  const [, navigate] = useLocation();
  const { user } = useAuth();
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("all");
  const [selectedProject, setSelectedProject] = useState<SpotlightProject | null>(null);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isAddContributorDialogOpen, setIsAddContributorDialogOpen] = useState(false);
  const [isAddTagDialogOpen, setIsAddTagDialogOpen] = useState(false);
  const [contributorFields, setContributorFields] = useState([{ id: Date.now() }]);
  const [tagFields, setTagFields] = useState([{ id: Date.now() }]);
  
  // Form for creating a project
  const createProjectForm = useForm<z.infer<typeof createProjectSchema>>({
    resolver: zodResolver(createProjectSchema),
    defaultValues: {
      title: "",
      url: "",
      description: "",
      thumbnail: "",
      isPinned: false,
      contributors: [],
      tags: [],
    },
  });
  
  // Form for editing a project
  const editProjectForm = useForm<z.infer<typeof createProjectSchema>>({
    resolver: zodResolver(createProjectSchema),
    defaultValues: {
      title: "",
      url: "",
      description: "",
      thumbnail: "",
      isPinned: false,
      contributors: [],
      tags: [],
    },
  });
  
  // Form for adding a contributor
  const addContributorForm = useForm({
    defaultValues: {
      name: "",
      email: "",
      role: "",
    },
  });
  
  // Form for adding a tag
  const addTagForm = useForm({
    defaultValues: {
      label: "",
      icon: "",
      type: "tag",
    },
  });
  
  // Fetch user's spotlight projects
  const { data: projects = [], isLoading: isLoadingProjects } = useQuery<SpotlightProject[]>({
    queryKey: ["/api/spotlight/projects"],
    enabled: !!user,
  });
  
  // Calculate derived project lists
  const pinnedProjects = projects.filter(project => project.isPinned);
  const unpinnedProjects = projects.filter(project => !project.isPinned);
  
  // Create project mutation
  const createProjectMutation = useMutation({
    mutationFn: async (data: z.infer<typeof createProjectSchema>) => {
      try {
        // Filter empty contributors and tags
        const filtered = {
          ...data,
          contributors: data.contributors?.filter(c => c.name.trim()) || [],
          tags: data.tags?.filter(t => t.label.trim()) || [],
        };
        
        console.log("Creating project with data:", JSON.stringify(filtered, null, 2));
        
        // Send all project data including contributors and tags
        const response = await apiRequest("POST", "/api/spotlight/projects", {
          title: filtered.title,
          url: filtered.url,
          description: filtered.description,
          thumbnail: filtered.thumbnail,
          isPinned: filtered.isPinned,
          contributors: filtered.contributors,
          tags: filtered.tags
        });
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => null);
          console.error("Project creation failed with status:", response.status, errorData);
          throw new Error(errorData?.message || `Server error: ${response.status}`);
        }
        
        return await response.json();
      } catch (err) {
        console.error("Error in project creation:", err);
        throw err;
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/spotlight/projects"] });
      setIsCreateDialogOpen(false);
      createProjectForm.reset();
      setContributorFields([{ id: Date.now() }]);
      setTagFields([{ id: Date.now() }]);
      toast({
        title: "Project created",
        description: "Your spotlight project has been created successfully.",
      });
    },
    onError: (error) => {
      console.error("Project creation error:", error);
      toast({
        title: "Failed to create project",
        description: error instanceof Error ? error.message : "An error occurred",
        variant: "destructive",
      });
    },
  });
  
  // Update project mutation with more specific types
  const updateProjectMutation = useMutation({
    mutationFn: async (data: { 
      projectId: number; 
      updates: {
        title?: string;
        url?: string;
        description?: string;
        thumbnail?: string;
        isPinned?: boolean;
        contributors?: any[];
        tags?: any[];
      } 
    }) => {
      // Use a more generic payload type to avoid type issues
      const response = await apiRequest("PATCH", `/api/spotlight/projects/${data.projectId}`, data.updates);
      return await response.json();
    },
    onSuccess: () => {
      // Force a refetch to get the updated data including contributors and tags
      queryClient.invalidateQueries({ queryKey: ["/api/spotlight/projects"] });
      if (selectedProject) {
        queryClient.invalidateQueries({ queryKey: ["/api/spotlight/projects", selectedProject.id] });
      }
      setIsEditDialogOpen(false);
      toast({
        title: "Project updated",
        description: "Your spotlight project has been updated successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to update project",
        description: error instanceof Error ? error.message : "An error occurred",
        variant: "destructive",
      });
    },
  });
  
  // Delete project mutation
  const deleteProjectMutation = useMutation({
    mutationFn: async (projectId: number) => {
      await apiRequest("DELETE", `/api/spotlight/projects/${projectId}`);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/spotlight/projects"] });
      if (selectedProject?.id === deleteProjectMutation.variables) {
        setSelectedProject(null);
      }
      toast({
        title: "Project deleted",
        description: "Your spotlight project has been deleted successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to delete project",
        description: error instanceof Error ? error.message : "An error occurred",
        variant: "destructive",
      });
    },
  });
  
  // Toggle pin status mutation
  const togglePinMutation = useMutation({
    mutationFn: async ({ projectId, isPinned }: { projectId: number; isPinned: boolean }) => {
      const response = await apiRequest("POST", `/api/spotlight/projects/${projectId}/pin`, { isPinned });
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/spotlight/projects"] });
      toast({
        title: "Pin status updated",
        description: "The project pin status has been updated.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to update pin status",
        description: error instanceof Error ? error.message : "An error occurred",
        variant: "destructive",
      });
    },
  });
  
  // Add contributor mutation
  const addContributorMutation = useMutation({
    mutationFn: async (data: { projectId: number; contributor: any }) => {
      const response = await apiRequest("POST", `/api/spotlight/projects/${data.projectId}/contributors`, data.contributor);
      return await response.json();
    },
    onSuccess: () => {
      if (selectedProject) {
        queryClient.invalidateQueries({ queryKey: ["/api/spotlight/projects", selectedProject.id] });
      }
      queryClient.invalidateQueries({ queryKey: ["/api/spotlight/projects"] });
      setIsAddContributorDialogOpen(false);
      addContributorForm.reset();
      toast({
        title: "Contributor added",
        description: "The contributor has been added to the project.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to add contributor",
        description: error instanceof Error ? error.message : "An error occurred",
        variant: "destructive",
      });
    },
  });
  
  // Remove contributor mutation
  const removeContributorMutation = useMutation({
    mutationFn: async (data: { projectId: number; contributorId: number }) => {
      await apiRequest("DELETE", `/api/spotlight/contributors/${data.contributorId}`);
    },
    onSuccess: () => {
      if (selectedProject) {
        queryClient.invalidateQueries({ queryKey: ["/api/spotlight/projects", selectedProject.id] });
      }
      queryClient.invalidateQueries({ queryKey: ["/api/spotlight/projects"] });
      toast({
        title: "Contributor removed",
        description: "The contributor has been removed from the project.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to remove contributor",
        description: error instanceof Error ? error.message : "An error occurred",
        variant: "destructive",
      });
    },
  });
  
  // Add tag mutation
  const addTagMutation = useMutation({
    mutationFn: async (data: { projectId: number; tag: any }) => {
      const response = await apiRequest("POST", `/api/spotlight/projects/${data.projectId}/tags`, data.tag);
      return await response.json();
    },
    onSuccess: () => {
      if (selectedProject) {
        queryClient.invalidateQueries({ queryKey: ["/api/spotlight/projects", selectedProject.id] });
      }
      queryClient.invalidateQueries({ queryKey: ["/api/spotlight/projects"] });
      setIsAddTagDialogOpen(false);
      addTagForm.reset();
      toast({
        title: "Tag added",
        description: "The tag has been added to the project.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to add tag",
        description: error instanceof Error ? error.message : "An error occurred",
        variant: "destructive",
      });
    },
  });
  
  // Remove tag mutation
  const removeTagMutation = useMutation({
    mutationFn: async (data: { projectId: number; tagId: number }) => {
      await apiRequest("DELETE", `/api/spotlight/tags/${data.tagId}`);
    },
    onSuccess: () => {
      if (selectedProject) {
        queryClient.invalidateQueries({ queryKey: ["/api/spotlight/projects", selectedProject.id] });
      }
      queryClient.invalidateQueries({ queryKey: ["/api/spotlight/projects"] });
      toast({
        title: "Tag removed",
        description: "The tag has been removed from the project.",
      });
    },
    onError: (error) => {
      toast({
        title: "Failed to remove tag",
        description: error instanceof Error ? error.message : "An error occurred",
        variant: "destructive",
      });
    },
  });
  
  // Record click mutation
  const recordClickMutation = useMutation({
    mutationFn: async (projectId: number) => {
      await apiRequest("POST", `/api/spotlight/projects/${projectId}/click`, {});
    },
  });
  
  // Handle form submissions
  const handleCreateProject = (data: z.infer<typeof createProjectSchema>) => {
    try {
      // Ensure required fields are present
      if (!data.title || !data.url) {
        toast({
          title: "Missing required fields",
          description: "Please fill in all required fields",
          variant: "destructive",
        });
        return;
      }
      
      console.log("Form data being submitted:", data);
      
      // Collect contributor data
      const contributorData = contributorFields
        .map(field => {
          const name = (document.getElementById(`contributor-name-${field.id}`) as HTMLInputElement)?.value;
          if (!name?.trim()) return null;
          
          const email = (document.getElementById(`contributor-email-${field.id}`) as HTMLInputElement)?.value;
          const role = (document.getElementById(`contributor-role-${field.id}`) as HTMLInputElement)?.value;
          
          return {
            name: name.trim(),
            email: email?.trim() || undefined,
            role: role?.trim() || undefined,
          };
        })
        .filter(Boolean) as { name: string; email?: string; role?: string }[];
      
      // Collect tag data
      const tagData = tagFields
        .map(field => {
          const label = (document.getElementById(`tag-label-${field.id}`) as HTMLInputElement)?.value;
          if (!label?.trim()) return null;
          
          const icon = (document.getElementById(`tag-icon-${field.id}`) as HTMLInputElement)?.value;
          const type = (document.getElementById(`tag-type-${field.id}`) as HTMLSelectElement)?.value;
          
          return {
            label: label.trim(),
            icon: icon?.trim() || undefined,
            type: type || "tag",
          };
        })
        .filter(Boolean) as { label: string; icon?: string; type: string }[];
      
      // Create project with collected data
      createProjectMutation.mutate({
        ...data,
        contributors: contributorData,
        tags: tagData.slice(0, 3), // Limit to 3 tags
      });
    } catch (error) {
      console.error("Error in handleCreateProject:", error);
      toast({
        title: "Error preparing project data",
        description: error instanceof Error ? error.message : "An unexpected error occurred",
        variant: "destructive",
      });
    }
  };
  
  const handleEditProject = async (data: z.infer<typeof createProjectSchema>) => {
    if (!selectedProject) return;
    
    try {
      // Ensure required fields are present
      if (!data.title || !data.url) {
        toast({
          title: "Missing required fields",
          description: "Please fill in all required fields",
          variant: "destructive",
        });
        return;
      }
      
      console.log("Edit form data being submitted:", data);
      
      // Filter out empty contributors and tags
      const filteredContributors = data.contributors?.filter(c => c.name.trim()) || [];
      const filteredTags = data.tags?.filter(t => t.label.trim()) || [];
      
      // First update just the basic project details
      await updateProjectMutation.mutateAsync({
        projectId: selectedProject.id,
        updates: {
          title: data.title,
          url: data.url,
          description: data.description || "",
          thumbnail: data.thumbnail,
          isPinned: Boolean(data.isPinned)
        },
      });
      
      // Delete all existing contributors then add new ones
      try {
        const currentProject = await fetch(`/api/spotlight/projects/${selectedProject.id}`).then(r => r.json());
        if (currentProject.contributors) {
          for (const contributor of currentProject.contributors) {
            await fetch(`/api/spotlight/contributors/${contributor.id}`, { method: 'DELETE' });
          }
        }
        
        // Add new contributors
        for (const contributor of filteredContributors) {
          if (contributor.name) {
            await fetch(`/api/spotlight/projects/${selectedProject.id}/contributors`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                name: contributor.name,
                email: contributor.email || "",
                role: contributor.role || ""
              })
            });
          }
        }
      } catch (err) {
        console.error("Error updating contributors:", err);
      }
      
      // Delete all existing tags then add new ones
      try {
        const currentProject = await fetch(`/api/spotlight/projects/${selectedProject.id}`).then(r => r.json());
        if (currentProject.tags) {
          for (const tag of currentProject.tags) {
            await fetch(`/api/spotlight/tags/${tag.id}`, { method: 'DELETE' });
          }
        }
        
        // Add new tags (maximum 3)
        const tagsToAdd = filteredTags.slice(0, 3);
        for (const tag of tagsToAdd) {
          if (tag.label) {
            await fetch(`/api/spotlight/projects/${selectedProject.id}/tags`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                label: tag.label,
                icon: tag.icon || "",
                type: tag.type || "tag"
              })
            });
          }
        }
      } catch (err) {
        console.error("Error updating tags:", err);
      }
      
      // Force a refetch of all projects to ensure the UI is updated
      queryClient.invalidateQueries({ queryKey: ["/api/spotlight/projects"] });
      
      // Show success toast
      toast({
        title: "Project updated",
        description: "Your project has been updated successfully with all details."
      });
      
      // Close the dialog
      setIsEditDialogOpen(false);
      
    } catch (error) {
      console.error("Error in handleEditProject:", error);
      toast({
        title: "Error updating project",
        description: error instanceof Error ? error.message : "An unexpected error occurred",
        variant: "destructive",
      });
    }
  };
  
  const handleAddContributor = (data: any) => {
    if (!selectedProject) return;
    
    addContributorMutation.mutate({
      projectId: selectedProject.id,
      contributor: data,
    });
  };
  
  const handleAddTag = (data: any) => {
    if (!selectedProject) return;
    
    addTagMutation.mutate({
      projectId: selectedProject.id,
      tag: data,
    });
  };
  
  const handleProjectClick = (project: SpotlightProject) => {
    // Open external link in a new tab
    window.open(project.url, "_blank");
    
    // Record the click
    recordClickMutation.mutate(project.id);
  };
  
  const handleEditClick = (project: SpotlightProject) => {
    setSelectedProject(project);
    
    // Set form values including contributors and tags
    editProjectForm.reset({
      title: project.title,
      url: project.url,
      description: project.description || "",
      thumbnail: project.thumbnail || "",
      isPinned: project.isPinned,
      contributors: project.contributors?.map(c => ({
        name: c.name,
        email: c.email || "",
        role: c.role || "",
      })) || [],
      tags: project.tags?.map(t => ({
        label: t.label,
        icon: t.icon || "",
        type: t.type,
      })) || [],
    });
    
    // Set contributor fields
    if (project.contributors?.length) {
      setContributorFields(
        project.contributors.map(c => ({ id: Date.now() + Math.random() }))
      );
    } else {
      setContributorFields([{ id: Date.now() }]);
    }
    
    // Set tag fields
    if (project.tags?.length) {
      setTagFields(
        project.tags.map(t => ({ id: Date.now() + Math.random() }))
      );
    } else {
      setTagFields([{ id: Date.now() }]);
    }
    
    setIsEditDialogOpen(true);
  };
  
  const handleDeleteClick = (project: SpotlightProject) => {
    if (window.confirm(`Are you sure you want to delete "${project.title}"?`)) {
      deleteProjectMutation.mutate(project.id);
    }
  };
  
  const handleTogglePinClick = (project: SpotlightProject) => {
    togglePinMutation.mutate({
      projectId: project.id,
      isPinned: !project.isPinned,
    });
  };
  
  const truncateText = (text: string = "", maxLength: number = 100) => {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + "...";
  };
  
  const getInitials = (name: string) => {
    const names = name.split(" ");
    if (names.length === 1) {
      return name.charAt(0).toUpperCase();
    }
    
    return (names[0].charAt(0) + names[names.length - 1].charAt(0)).toUpperCase();
  };
  
  // Main content
  if (!user) {
    return (
      <div className="flex items-center justify-center h-screen">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle>Authentication Required</CardTitle>
            <CardDescription>
              Please log in to access the Spotlight feature.
            </CardDescription>
          </CardHeader>
          <CardFooter>
            <Button onClick={() => navigate("/auth")} className="w-full">
              Go to Login
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }
  
  return (
    <div className="container mx-auto py-8 px-4 max-w-6xl">
      <div className="flex items-center justify-between mb-8">
        <div className="flex items-center gap-3">
          <Button 
            variant="ghost" 
            size="icon" 
            onClick={() => navigate("/")}
            className="rounded-full mr-2"
          >
            <ArrowLeft className="h-5 w-5" />
            <span className="sr-only">Back to Dashboard</span>
          </Button>
          <div>
            <h1 className="text-3xl font-bold">Collaborative Spotlight</h1>
            <p className="text-muted-foreground mt-1">
              Showcase your projects and collaborations
            </p>
          </div>
        </div>
        <Button onClick={() => setIsCreateDialogOpen(true)}>
          <Plus className="h-4 w-4 mr-2" />
          Add Project
        </Button>
      </div>
      
      {/* Pinned Projects Carousel */}
      {pinnedProjects.length > 0 && (
        <div className="mb-8">
          <div className="flex items-center gap-2 mb-4">
            <Pin className="h-4 w-4 text-primary" />
            <h2 className="text-xl font-semibold">Pinned Projects</h2>
          </div>
          <Carousel className="w-full">
            <CarouselContent>
              {pinnedProjects.map((project) => (
                <CarouselItem key={project.id} className="md:basis-1/2 lg:basis-1/3">
                  <Card className="h-full">
                    <CardHeader className="pb-2">
                      <div className="flex justify-between items-start">
                        <CardTitle className="text-lg">{project.title}</CardTitle>
                        <Badge variant="secondary" className="ml-2 whitespace-nowrap">
                          <Eye className="h-3 w-3 mr-1" />
                          {project.viewCount}
                        </Badge>
                      </div>
                      <CardDescription className="line-clamp-2">
                        {truncateText(project.description, 80)}
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="pb-2">
                      {project.thumbnail && (
                        <div className="aspect-video bg-muted rounded-md overflow-hidden mb-2">
                          <img
                            src={project.thumbnail}
                            alt={project.title}
                            className="w-full h-full object-cover"
                            onError={(e) => {
                              (e.target as HTMLImageElement).src = 'https://placehold.co/600x400?text=No+Image';
                            }}
                          />
                        </div>
                      )}
                      
                      {/* Tags */}
                      <div className="flex flex-wrap gap-1 mt-2">
                        {project.tags?.map((tag) => (
                          <Badge key={tag.id} variant="outline" className="text-xs">
                            {tag.label}
                          </Badge>
                        ))}
                      </div>
                      
                      {/* Contributors */}
                      <div className="flex items-center mt-3">
                        <Users className="h-3 w-3 mr-1 text-muted-foreground" />
                        <div className="flex -space-x-2">
                          {project.contributors?.slice(0, 3).map((contributor) => (
                            <Tooltip key={contributor.id}>
                              <TooltipTrigger asChild>
                                <Avatar className="h-6 w-6 border-2 border-background">
                                  <AvatarFallback className="text-[10px]">
                                    {getInitials(contributor.name)}
                                  </AvatarFallback>
                                </Avatar>
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="font-semibold">{contributor.name}</p>
                                {contributor.role && <p className="text-xs">{contributor.role}</p>}
                              </TooltipContent>
                            </Tooltip>
                          ))}
                          {project.contributors && project.contributors.length > 3 && (
                            <Avatar className="h-6 w-6 border-2 border-background">
                              <AvatarFallback className="text-[10px]">
                                +{project.contributors.length - 3}
                              </AvatarFallback>
                            </Avatar>
                          )}
                        </div>
                      </div>
                    </CardContent>
                    <CardFooter className="pt-0">
                      <div className="flex justify-between items-center w-full">
                        <Button
                          variant="default"
                          size="sm"
                          className="text-xs h-8"
                          onClick={() => handleProjectClick(project)}
                        >
                          <ExternalLink className="h-3 w-3 mr-1" />
                          Visit
                        </Button>
                        
                        <div className="flex items-center gap-1">
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8"
                                onClick={() => handleEditClick(project)}
                              >
                                <Edit className="h-3.5 w-3.5" />
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>Edit Project</TooltipContent>
                          </Tooltip>
                          
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8"
                                onClick={() => handleTogglePinClick(project)}
                              >
                                <Pin className="h-3.5 w-3.5 text-primary" />
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>Unpin Project</TooltipContent>
                          </Tooltip>
                          
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8 text-destructive"
                                onClick={() => handleDeleteClick(project)}
                              >
                                <Trash className="h-3.5 w-3.5" />
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>Delete Project</TooltipContent>
                          </Tooltip>
                        </div>
                      </div>
                    </CardFooter>
                  </Card>
                </CarouselItem>
              ))}
            </CarouselContent>
            <CarouselPrevious />
            <CarouselNext />
          </Carousel>
        </div>
      )}
      
      {/* All Projects Grid */}
      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-4">All Projects</h2>
        
        <div className="mb-4">
          <Tabs defaultValue="all" value={activeTab} onValueChange={setActiveTab}>
            <TabsList>
              <TabsTrigger value="all">All</TabsTrigger>
              <TabsTrigger value="web">Web</TabsTrigger>
              <TabsTrigger value="mobile">Mobile</TabsTrigger>
              <TabsTrigger value="design">Design</TabsTrigger>
            </TabsList>
          </Tabs>
        </div>
        
        {isLoadingProjects ? (
          <div className="flex justify-center p-12">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
          </div>
        ) : projects.length === 0 ? (
          <div className="text-center p-12 border rounded-lg bg-muted/20">
            <div className="inline-flex h-12 w-12 items-center justify-center rounded-full bg-muted mb-4">
              <AlertTriangle className="h-6 w-6 text-muted-foreground" />
            </div>
            <h3 className="text-lg font-semibold">No Projects Yet</h3>
            <p className="text-muted-foreground mb-4 max-w-md mx-auto">
              Start showcasing your collaborative projects by adding your first project.
            </p>
            <Button onClick={() => setIsCreateDialogOpen(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Add First Project
            </Button>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {unpinnedProjects.map((project) => (
              <Card key={project.id} className="h-full">
                <CardHeader className="pb-2">
                  <div className="flex justify-between items-start">
                    <CardTitle className="text-lg">{project.title}</CardTitle>
                    <Badge variant="secondary" className="ml-2 whitespace-nowrap">
                      <Eye className="h-3 w-3 mr-1" />
                      {project.viewCount}
                    </Badge>
                  </div>
                  <CardDescription className="line-clamp-2">
                    {truncateText(project.description, 80)}
                  </CardDescription>
                </CardHeader>
                <CardContent className="pb-2">
                  {project.thumbnail && (
                    <div className="aspect-video bg-muted rounded-md overflow-hidden mb-2">
                      <img
                        src={project.thumbnail}
                        alt={project.title}
                        className="w-full h-full object-cover"
                        onError={(e) => {
                          (e.target as HTMLImageElement).src = 'https://placehold.co/600x400?text=No+Image';
                        }}
                      />
                    </div>
                  )}
                  
                  {/* Tags */}
                  <div className="flex flex-wrap gap-1 mt-2">
                    {project.tags?.map((tag) => (
                      <Badge key={tag.id} variant="outline" className="text-xs">
                        {tag.label}
                      </Badge>
                    ))}
                  </div>
                  
                  {/* Contributors */}
                  <div className="flex items-center mt-3">
                    <Users className="h-3 w-3 mr-1 text-muted-foreground" />
                    <div className="flex -space-x-2">
                      {project.contributors?.slice(0, 3).map((contributor) => (
                        <Tooltip key={contributor.id}>
                          <TooltipTrigger asChild>
                            <Avatar className="h-6 w-6 border-2 border-background">
                              <AvatarFallback className="text-[10px]">
                                {getInitials(contributor.name)}
                              </AvatarFallback>
                            </Avatar>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p className="font-semibold">{contributor.name}</p>
                            {contributor.role && <p className="text-xs">{contributor.role}</p>}
                          </TooltipContent>
                        </Tooltip>
                      ))}
                      {project.contributors && project.contributors.length > 3 && (
                        <Avatar className="h-6 w-6 border-2 border-background">
                          <AvatarFallback className="text-[10px]">
                            +{project.contributors.length - 3}
                          </AvatarFallback>
                        </Avatar>
                      )}
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="pt-0">
                  <div className="flex justify-between items-center w-full">
                    <Button
                      variant="default"
                      size="sm"
                      className="text-xs h-8"
                      onClick={() => handleProjectClick(project)}
                    >
                      <ExternalLink className="h-3 w-3 mr-1" />
                      Visit
                    </Button>
                    
                    <div className="flex items-center gap-1">
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8"
                            onClick={() => handleEditClick(project)}
                          >
                            <Edit className="h-3.5 w-3.5" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>Edit Project</TooltipContent>
                      </Tooltip>
                      
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8"
                            onClick={() => handleTogglePinClick(project)}
                          >
                            <Pin className="h-3.5 w-3.5" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>Pin Project</TooltipContent>
                      </Tooltip>
                      
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8 text-destructive"
                            onClick={() => handleDeleteClick(project)}
                          >
                            <Trash className="h-3.5 w-3.5" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>Delete Project</TooltipContent>
                      </Tooltip>
                    </div>
                  </div>
                </CardFooter>
              </Card>
            ))}
          </div>
        )}
      </div>
      
      {/* Create Project Dialog */}
      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
        <DialogContent className="max-w-xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Add New Project</DialogTitle>
            <DialogDescription>
              Showcase your work and collaborations with others.
            </DialogDescription>
          </DialogHeader>
          
          <form onSubmit={createProjectForm.handleSubmit(handleCreateProject)}>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-1 gap-2">
                <Label htmlFor="title">Project Title</Label>
                <Input
                  id="title"
                  placeholder="Enter project title"
                  {...createProjectForm.register("title")}
                />
                {createProjectForm.formState.errors.title && (
                  <p className="text-sm text-destructive">
                    {createProjectForm.formState.errors.title.message}
                  </p>
                )}
              </div>
              
              <div className="grid grid-cols-1 gap-2">
                <Label htmlFor="url">Project URL</Label>
                <Input
                  id="url"
                  placeholder="https://example.com"
                  {...createProjectForm.register("url")}
                />
                {createProjectForm.formState.errors.url && (
                  <p className="text-sm text-destructive">
                    {createProjectForm.formState.errors.url.message}
                  </p>
                )}
              </div>
              
              <div className="grid grid-cols-1 gap-2">
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  placeholder="Brief description of the project"
                  rows={3}
                  {...createProjectForm.register("description")}
                />
              </div>
              
              <div className="grid grid-cols-1 gap-2">
                <Label htmlFor="thumbnail">Thumbnail URL</Label>
                <Input
                  id="thumbnail"
                  placeholder="https://example.com/image.jpg"
                  {...createProjectForm.register("thumbnail")}
                />
              </div>
              
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="isPinned"
                  {...createProjectForm.register("isPinned")}
                />
                <Label htmlFor="isPinned">Pin this project</Label>
              </div>
              
              <Separator />
              
              <div className="grid grid-cols-1 gap-4">
                <div className="flex items-center gap-2">
                  <Users className="h-4 w-4" />
                  <h4 className="text-sm font-medium">Contributors</h4>
                </div>
                
                {contributorFields.map((field) => (
                  <div key={field.id} className="grid grid-cols-1 gap-2">
                    <div className="flex flex-wrap gap-2">
                      <div className="flex-1 min-w-[200px]">
                        <Label htmlFor={`contributor-name-${field.id}`}>Name</Label>
                        <Input
                          id={`contributor-name-${field.id}`}
                          placeholder="Contributor name"
                        />
                      </div>
                      <div className="flex-1 min-w-[200px]">
                        <Label htmlFor={`contributor-email-${field.id}`}>Email (optional)</Label>
                        <Input
                          id={`contributor-email-${field.id}`}
                          placeholder="email@example.com"
                        />
                      </div>
                      <div className="flex-1 min-w-[150px]">
                        <Label htmlFor={`contributor-role-${field.id}`}>Role (optional)</Label>
                        <Input
                          id={`contributor-role-${field.id}`}
                          placeholder="Designer, Developer, etc."
                        />
                      </div>
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        onClick={() => {
                          const newFields = contributorFields.filter(f => f.id !== field.id);
                          if (newFields.length > 0) {
                            setContributorFields(newFields);
                          }
                        }}
                        disabled={contributorFields.length === 1}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                ))}
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => setContributorFields([...contributorFields, { id: Date.now() }])}
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Contributor
                </Button>
              </div>
              
              <Separator />
              
              <div className="grid grid-cols-1 gap-4">
                <div className="flex items-center gap-2">
                  <Tag className="h-4 w-4" />
                  <h4 className="text-sm font-medium">Tags (max 3)</h4>
                </div>
                
                {tagFields.slice(0, 3).map((field, index) => (
                  <div key={field.id} className="grid grid-cols-1 gap-2">
                    <div className="flex flex-wrap gap-2">
                      <div className="flex-1 min-w-[200px]">
                        <Label htmlFor={`tag-label-${field.id}`}>Label</Label>
                        <Input
                          id={`tag-label-${field.id}`}
                          placeholder="Tag label"
                        />
                      </div>
                      <div className="flex-1 min-w-[150px]">
                        <Label htmlFor={`tag-icon-${field.id}`}>Icon (optional)</Label>
                        <Input
                          id={`tag-icon-${field.id}`}
                          placeholder="Icon class or emoji"
                        />
                      </div>
                      <div className="flex-1 min-w-[150px]">
                        <Label htmlFor={`tag-type-${field.id}`}>Type</Label>
                        <Select defaultValue="tag" id={`tag-type-${field.id}`}>
                          <SelectTrigger>
                            <SelectValue placeholder="Select type" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="tag">Tag</SelectItem>
                            <SelectItem value="technology">Technology</SelectItem>
                            <SelectItem value="category">Category</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        onClick={() => {
                          const newFields = tagFields.filter(f => f.id !== field.id);
                          if (newFields.length > 0) {
                            setTagFields(newFields);
                          }
                        }}
                        disabled={tagFields.length === 1}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                ))}
                {tagFields.length < 3 && (
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => setTagFields([...tagFields, { id: Date.now() }])}
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add Tag
                  </Button>
                )}
              </div>
            </div>
            
            <DialogFooter>
              <Button
                type="button"
                variant="outline"
                onClick={() => setIsCreateDialogOpen(false)}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={createProjectMutation.isPending}>
                {createProjectMutation.isPending && (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                )}
                Create Project
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
      
      {/* Edit Project Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="max-w-xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Edit Project</DialogTitle>
            <DialogDescription>
              Update your project details and collaborators.
            </DialogDescription>
          </DialogHeader>
          
          <form onSubmit={editProjectForm.handleSubmit(handleEditProject)}>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-1 gap-2">
                <Label htmlFor="edit-title">Project Title</Label>
                <Input
                  id="edit-title"
                  placeholder="Enter project title"
                  {...editProjectForm.register("title")}
                />
                {editProjectForm.formState.errors.title && (
                  <p className="text-sm text-destructive">
                    {editProjectForm.formState.errors.title.message}
                  </p>
                )}
              </div>
              
              <div className="grid grid-cols-1 gap-2">
                <Label htmlFor="edit-url">Project URL</Label>
                <Input
                  id="edit-url"
                  placeholder="https://example.com"
                  {...editProjectForm.register("url")}
                />
                {editProjectForm.formState.errors.url && (
                  <p className="text-sm text-destructive">
                    {editProjectForm.formState.errors.url.message}
                  </p>
                )}
              </div>
              
              <div className="grid grid-cols-1 gap-2">
                <Label htmlFor="edit-description">Description</Label>
                <Textarea
                  id="edit-description"
                  placeholder="Brief description of the project"
                  rows={3}
                  {...editProjectForm.register("description")}
                />
              </div>
              
              <div className="grid grid-cols-1 gap-2">
                <Label htmlFor="edit-thumbnail">Thumbnail URL</Label>
                <Input
                  id="edit-thumbnail"
                  placeholder="https://example.com/image.jpg"
                  {...editProjectForm.register("thumbnail")}
                />
              </div>
              
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="edit-isPinned"
                  checked={editProjectForm.watch("isPinned")}
                  onCheckedChange={(checked) => {
                    editProjectForm.setValue("isPinned", checked === true);
                  }}
                />
                <Label htmlFor="edit-isPinned">Pin this project</Label>
              </div>
              
              <Separator />
              
              <div className="grid grid-cols-1 gap-4">
                <div className="flex items-center gap-2">
                  <Users className="h-4 w-4" />
                  <h4 className="text-sm font-medium">Contributors</h4>
                </div>
                
                {contributorFields.map((field, index) => (
                  <div key={field.id} className="grid grid-cols-1 gap-2">
                    <div className="flex flex-wrap gap-2">
                      <div className="flex-1 min-w-[200px]">
                        <Label htmlFor={`contributor-name-${field.id}`}>Name</Label>
                        <Input
                          id={`contributor-name-${field.id}`}
                          placeholder="Contributor name"
                          defaultValue={editProjectForm.watch(`contributors.${index}.name`) || ""}
                        />
                      </div>
                      <div className="flex-1 min-w-[200px]">
                        <Label htmlFor={`contributor-email-${field.id}`}>Email (optional)</Label>
                        <Input
                          id={`contributor-email-${field.id}`}
                          placeholder="email@example.com"
                          defaultValue={editProjectForm.watch(`contributors.${index}.email`) || ""}
                        />
                      </div>
                      <div className="flex-1 min-w-[150px]">
                        <Label htmlFor={`contributor-role-${field.id}`}>Role (optional)</Label>
                        <Input
                          id={`contributor-role-${field.id}`}
                          placeholder="Designer, Developer, etc."
                          defaultValue={editProjectForm.watch(`contributors.${index}.role`) || ""}
                        />
                      </div>
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        onClick={() => {
                          const newFields = contributorFields.filter(f => f.id !== field.id);
                          if (newFields.length > 0) {
                            setContributorFields(newFields);
                          }
                        }}
                        disabled={contributorFields.length === 1}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                ))}
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => setContributorFields([...contributorFields, { id: Date.now() }])}
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Contributor
                </Button>
              </div>
              
              <Separator />
              
              <div className="grid grid-cols-1 gap-4">
                <div className="flex items-center gap-2">
                  <Tag className="h-4 w-4" />
                  <h4 className="text-sm font-medium">Tags (max 3)</h4>
                </div>
                
                {tagFields.slice(0, 3).map((field, index) => (
                  <div key={field.id} className="grid grid-cols-1 gap-2">
                    <div className="flex flex-wrap gap-2">
                      <div className="flex-1 min-w-[200px]">
                        <Label htmlFor={`tag-label-${field.id}`}>Label</Label>
                        <Input
                          id={`tag-label-${field.id}`}
                          placeholder="Tag label"
                          defaultValue={editProjectForm.watch(`tags.${index}.label`) || ""}
                        />
                      </div>
                      <div className="flex-1 min-w-[150px]">
                        <Label htmlFor={`tag-icon-${field.id}`}>Icon (optional)</Label>
                        <Input
                          id={`tag-icon-${field.id}`}
                          placeholder="Icon class or emoji"
                          defaultValue={editProjectForm.watch(`tags.${index}.icon`) || ""}
                        />
                      </div>
                      <div className="flex-1 min-w-[150px]">
                        <Label htmlFor={`tag-type-${field.id}`}>Type</Label>
                        <Select 
                          defaultValue={editProjectForm.watch(`tags.${index}.type`) || "tag"}
                          onValueChange={(value) => {
                            const tags = editProjectForm.getValues("tags") || [];
                            tags[index] = { ...tags[index], type: value };
                            editProjectForm.setValue("tags", tags);
                          }}
                        >
                          <SelectTrigger id={`tag-type-${field.id}`}>
                            <SelectValue placeholder="Select type" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="tag">Tag</SelectItem>
                            <SelectItem value="technology">Technology</SelectItem>
                            <SelectItem value="category">Category</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        onClick={() => {
                          const newFields = tagFields.filter(f => f.id !== field.id);
                          if (newFields.length > 0) {
                            setTagFields(newFields);
                          }
                        }}
                        disabled={tagFields.length === 1}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                ))}
                {tagFields.length < 3 && (
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => setTagFields([...tagFields, { id: Date.now() }])}
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add Tag
                  </Button>
                )}
              </div>
            </div>
            
            <DialogFooter>
              <Button
                type="button"
                variant="outline"
                onClick={() => setIsEditDialogOpen(false)}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={updateProjectMutation.isPending}>
                {updateProjectMutation.isPending && (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                )}
                Save Changes
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
}